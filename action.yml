name: 'Yarn Workspaces List'
description: 'Outputs a list of Yarn Workspace which matches a certain condition.'
branding:
  icon: 'package'
  color: 'purple'
inputs:
  condition:
    description: 'The condition to match against the workspaces in shell script. Example: `[ -f "$workspace_path/package.json" ] && jq -e ".scripts.test" "$workspace_path/package.json"`'
    required: true
    default: 'true'
  workspace-root:
    description: 'The root directory of the Yarn Workspace. Default: `.`'
    required: false
    default: '.'
outputs:
  workspace-paths:
    description: "A list of matched yarn workspace paths"
    value: ${{ steps.list-workspaces.outputs.workspace_paths_json }}
  workspace-names:
    description: "A list of matched yarn workspace names"
    value: ${{ steps.list-workspaces.outputs.workspace_names_json }}
  workspace-lines:
    description: "A list of matched yarn workspace JSON lines"
    value: ${{ steps.list-workspaces.outputs.workspace_lines_json }}
runs:
  using: "composite"
  steps:
    - name: Check Yarn Version
      shell: bash
      run: |
        yarn --version # This also avoids subsequent yarn commands outputting "! Corepack is about to download ..." messages which can interfere with the output parsing.
    - name: List workspaces
      id: list-workspaces
      shell: bash
      run: |
        # List all workspace which matches a certain condition.

        cd "${{ inputs.workspace-root }}"

        # Attempt to list all workspaces.
        if yarn_workspaces_list_json=$(yarn workspaces list --json 2>&1); then
          echo "Yarn workspaces:"
          echo "$yarn_workspaces_list_json"
        else
          echo "[ERROR] Failed to list Yarn workspaces. Please ensure that the current directory contains Yarn Workspaces and you have the correct version of Yarn installed."
          echo ""
          echo "Error returned by the command \`yarn workspaces list --json\`:"
          echo "$yarn_workspaces_list_json"
          echo ""
          echo "Additional information:"
          echo "\`pwd\`: $(pwd)"
          echo "\`yarn --version\`: $(yarn --version 2>&1 || true)"

          exit 1
        fi

        # Initialize an empty array to store matched workspaces.
        matched_workspaces=()

        # Process each workspace path from the 'yarn workspaces list --json' output.
        while IFS= read -r line; do
          # Extract the workspace location.
          workspace_path=$(echo "$line" | jq -r '.location')
          # Extract the workspace name.
          workspace_name=$(echo "$line" | jq -r '.name')

          # For backward compatibility.
          workspace_location="$workspace_path"

          # Exclude the root workspace.
          if [ "$workspace_path" = "." ]; then
            continue
          fi

          # Check if workspace matches the specified condition.
          if ${{ inputs.condition }} > /dev/null; then
            # Add the workspace to the array
            matched_workspaces+=("$line")
          fi
        done < <(echo "$yarn_workspaces_list_json")

        echo ""
        echo "Matched workspaces:"
        printf '%s\n' "${matched_workspaces[@]}"

        matched_workspace_paths=()
        for item in "${matched_workspaces[@]}"; do
          location=$(echo "$item" | jq -r '.location')
          matched_workspace_paths+=("$location")
        done

        matched_workspace_names=()
        for item in "${matched_workspaces[@]}"; do
          location=$(echo "$item" | jq -r '.name')
          matched_workspace_names+=("$location")
        done

        # Convert into JSON array.
        workspace_names_json=$(jq -cn --argjson names "$(jq -n '$ARGS.positional' --args "${matched_workspace_names[@]}")" '$names')
        workspace_paths_json=$(jq -cn --argjson paths "$(jq -n '$ARGS.positional' --args "${matched_workspace_paths[@]}")" '$paths')
        workspace_lines_json=$(jq -cn --argjson paths "$(jq -n '$ARGS.positional' --args "${matched_workspaces[@]}")" '$paths')

        # Output.
        echo ""
        echo "Matched workspace paths:"
        echo "$workspace_paths_json" | jq .
        echo ""
        echo "Matched workspace names:"
        echo "$workspace_names_json" | jq .

        echo "workspace_lines_json=$workspace_lines_json" >> $GITHUB_OUTPUT
        echo "workspace_names_json=$workspace_names_json" >> $GITHUB_OUTPUT
        echo "workspace_paths_json=$workspace_paths_json" >> $GITHUB_OUTPUT
